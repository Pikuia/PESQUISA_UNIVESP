import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
import os
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.decomposition import PCA

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Pesquisa PrEP/HIV - S√£o Paulo",
    page_icon="üè≥Ô∏è‚Äçüåà",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personalizado com melhor contraste
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        color: #1E90FF;
        text-align: center;
        margin-bottom: 2rem;
    }
    .section-header {
        font-size: 1.8rem;
        color: #4682B4;
        border-bottom: 2px solid #1E90FF;
        padding-bottom: 0.5rem;
        margin-top: 2rem;
    }
    .stButton>button {
        background-color: #1E90FF;
        color: white;
        font-weight: bold;
        border: none;
        padding: 0.8rem 1.5rem;
        border-radius: 0.5rem;
        margin-top: 1.5rem;
    }
    .stButton>button:hover {
        background-color: #4682B4;
    }
    .success-box {
        padding: 1.5rem;
        border-radius: 0.5rem;
        background-color: #E6F7FF;
        border-left: 5px solid #1E90FF;
        margin-bottom: 1.5rem;
        color: #000000 !important;
    }
    .info-box {
        padding: 1.5rem;
        border-radius: 0.5rem;
        background-color: #F0F8FF;
        border-left: 5px solid #4682B4;
        margin: 1rem 0;
        color: #000000 !important;
    }
    .tech-card {
        padding: 1rem;
        border-radius: 0.5rem;
        background-color: #F8F9FA;
        border-left: 5px solid #28A745;
        margin: 0.5rem 0;
        color: #000000 !important;
    }
    .ml-explanation {
        padding: 1.5rem;
        border-radius: 0.5rem;
        background-color: #FFFFFF;
        border: 2px solid #6F42C1;
        margin: 1rem 0;
        color: #000000 !important;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    /* Melhorar contraste para todo o texto */
    .stMarkdown, .stText, .stAlert, .stInfo {
        color: #000000 !important;
    }
    /* Garantir que todos os textos sejam vis√≠veis */
    div[data-testid="stMarkdownContainer"] {
        color: #000000 !important;
    }
    /* Remover fundos brancos sobrepostos */
    .stApp {
        background-color: #FFFFFF;
    }
</style>
""", unsafe_allow_html=True)

# Inicializa√ß√£o de dados
if 'dados' not in st.session_state:
    if os.path.exists("respostas_prep.csv"):
        st.session_state.dados = pd.read_csv("respostas_prep.csv")
    else:
        st.session_state.dados = pd.DataFrame()

# Fun√ß√£o para salvar dados
def salvar_dados(resposta):
    arquivo_csv = "respostas_prep.csv"
    
    # Adicionar timestamp
    resposta['timestamp'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    if os.path.exists(arquivo_csv):
        df_existente = pd.read_csv(arquivo_csv)
        df_novo = pd.DataFrame([resposta])
        df_final = pd.concat([df_existente, df_novo], ignore_index=True)
    else:
        df_final = pd.DataFrame([resposta])
    
    df_final.to_csv(arquivo_csv, index=False)
    st.session_state.dados = df_final
    return True

# Barra lateral com informa√ß√µes do projeto
with st.sidebar:
    st.title("Sobre o Projeto")
    st.markdown("""
    <div class="info-box">
        <h4 style="color: #000000;">Pesquisa sobre Conhecimento de PrEP/PEP</h4>
        <p style="color: #000000;">Este projeto visa mapear o conhecimento sobre m√©todos de preven√ß√£o ao HIV na popula√ß√£o de S√£o Paulo.</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Explica√ß√£o sobre PrEP e PEP
    with st.expander("‚ÑπÔ∏è O que √© PrEP e PEP?"):
        st.markdown("""
        <div style="color: #000000;">
            <h4 style="color: #000000;">PrEP (Profilaxia Pr√©-Exposi√ß√£o)</h4>
            <p style="color: #000000;">Uso di√°rio de medicamentos por pessoas HIV-negativas para reduzir o risco de infec√ß√£o pelo HIV.</p>
            
            <h4 style="color: #000000;">PEP (Profilaxia P√≥s-Exposi√ß√£o)</h4>
            <p style="color: #000000;">Uso emergencial de medicamentos por pessoas que possam ter sido expostas ao HIV, iniciado em at√© 72 horas ap√≥s a exposi√ß√£o.</p>
        </div>
        """, unsafe_allow_html=True)

# Cabe√ßalho
st.markdown('<h1 class="main-header">Pesquisa sobre PrEP e Preven√ß√£o ao HIV em S√£o Paulo</h1>', unsafe_allow_html=True)
st.markdown("""
<div style="text-align: center; margin-bottom: 2rem; color: #000000;">
    <p>Esta pesquisa tem como objetivo mapear o conhecimento sobre PrEP e PEP na popula√ß√£o de S√£o Paulo, 
    identificando lacunas de informa√ß√£o e barreiras de acesso.</p>
    <p><strong>Todas as informa√ß√µes s√£o an√¥nimas e confidenciais.</strong></p>
</div>
""", unsafe_allow_html=True)

# Formul√°rio de pesquisa
with st.form("pesquisa_form"):
    st.markdown('<h2 class="section-header">Parte 1: Conhecimento sobre PrEP/PEP</h2>', unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        q1 = st.radio("**Voc√™ conhece a PrEP (Profilaxia Pr√©-Exposi√ß√£o)?**", [
            "Sim, conhe√ßo bem", 
            "Conhe√ßo parcialmente", 
            "J√° ouvi falar mas n√£o sei detalhes", 
            "N√£o conhe√ßo"
        ])
        
        q2 = st.radio("**E a PEP (Profilaxia P√≥s-Exposi√ß√£o)?**", [
            "Sim, conhe√ßo bem", 
            "Conhe√ßo parcialmente", 
            "J√° ouvi falar mas n√£o sei detalhes", 
            "N√£o conhe√ßo"
        ])
    
    with col2:
        q3 = st.radio("**Voc√™ sabe onde conseguir PrEP/PEP em S√£o Paulo?**", [
            "Sim, conhe√ßo v√°rios servi√ßos",
            "Conhe√ßo apenas um local",
            "N√£o sei mas gostaria de saber",
            "N√£o sei e n√£o tenho interesse"
        ])
        
        q4 = st.radio("**Como voc√™ ficou sabendo sobre PrEP/PEP?**", [
            "Profissional de sa√∫de",
            "Amigos/conhecidos",
            "Internet/redes sociais",
            "Material informativo (folhetos, cartazes)",
            "Nunca ouvi falar",
            "Outra fonte"
        ])
    
    st.markdown('<h2 class="section-header">Parte 2: Experi√™ncia Pessoal</h2>', unsafe_allow_html=True)
    
    col3, col4 = st.columns(2)
    
    with col3:
        q5 = st.radio("**Voc√™ j√° usou ou usa PrEP/PEP?**", [
            "Sim, uso atualmente",
            "Sim, j√° usei no passado",
            "N√£o, mas pretendo usar",
            "N√£o uso e n√£o tenho interesse",
            "Prefiro n√£o responder"
        ])
        
        q6 = st.radio("**Conhece algu√©m que usa ou j√° usou PrEP/PEP?**", [
            "Sim, v√°rios conhecidos",
            "Sim, algumas pessoas",
            "N√£o conhe√ßo ningu√©m",
            "Prefiro n√£o responder"
        ])
    
    with col4:
        q7 = st.radio("**Com que frequ√™ncia voc√™ faz teste de HIV?**", [
            "A cada 3 meses",
            "A cada 6 meses",
            "Uma vez por ano",
            "Raramente fa√ßo",
            "Nunca fiz",
            "Prefiro n√£o responder"
        ])
        
        q8 = st.multiselect("**Quais m√©todos de preven√ß√£o ao HIV voc√™ utiliza?**", [
            "PrEP",
            "PEP",
            "Camisinha masculina",
            "Camisinha feminina",
            "Testagem regular",
            "N√£o utilizo m√©todos de preven√ß√£o",
            "Outro"
        ])
    
    st.markdown('<h2 class="section-header">Parte 3: Perfil Demogr√°fico</h2>', unsafe_allow_html=True)
    
    col5, col6 = st.columns(2)
    
    with col5:
        genero = st.selectbox("**Identidade de g√™nero:**", [
            "Mulher cisg√™nero",
            "Homem cisg√™nero",
            "Mulher trans/transg√™nero",
            "Homem trans/transg√™nero",
            "Pessoa n√£o-bin√°ria",
            "Travesti",
            "Ag√™nero",
            "G√™nero fluido",
            "Outro",
            "Prefiro n√£o responder"
        ])
        
        orientacao = st.selectbox("**Orienta√ß√£o sexual:**", [
            "Assexual",
            "Bissexual",
            "Gay",
            "L√©sbica",
            "Pansexual",
            "Heterossexual",
            "Queer",
            "Outra",
            "Prefiro n√£o responder"
        ])
        
        raca = st.radio("**Ra√ßa/Cor:**", [
            "Amarela (origem asi√°tica)",
            "Branca",
            "Ind√≠gena",
            "Parda",
            "Preta",
            "Prefiro n√£o responder"
        ])
    
    with col6:
        idade = st.radio("**Faixa et√°ria:**", [
            "13-17", "18-24", "25-29", "30-39",
            "40-49", "50-59", "60+", "Prefiro n√£o responder"
        ])
        
        renda = st.radio("**Renda mensal individual:**", [
            "At√© 1 sal√°rio m√≠nimo", 
            "1-2 sal√°rios m√≠nimos",
            "2-3 sal√°rios m√≠nimos", 
            "3-5 sal√°rios m√≠nimos",
            "Mais de 5 sal√°rios m√≠nimos",
            "Prefiro n√£o responder"
        ])
        
        regiao = st.selectbox("**Regi√£o de S√£o Paulo onde mora:**", [
            "Centro expandido",
            "Zona Norte",
            "Zona Sul",
            "Zona Leste",
            "Zona Oeste",
            "Regi√£o Metropolitana",
            "N√£o moro em S√£o Paulo",
            "Prefiro n√£o responder"
        ])
    
    # Termos de consentimento
    st.markdown("""
    <div style="background-color: #F0F8FF; padding: 1rem; border-radius: 0.5rem; margin: 1rem 0; color: #000000;">
        <p><strong>Termo de Consentimento:</strong> Ao enviar este formul√°rio, voc√™ concorda em participar desta pesquisa 
        e que seus dados an√¥nimos sejam utilizados para fins de estudo estat√≠stico. Todas as informa√ß√µes s√£o confidenciais 
        e n√£o ser√£o compartilhadas de forma individual.</p>
    </div>
    """, unsafe_allow_html=True)
    
    consentimento = st.checkbox("**Eu concordo em participar da pesquisa**", value=False)
    
    # Bot√£o de envio
    enviado = st.form_submit_button("Enviar Respostas")
    
    if enviado and consentimento:
        resposta = {
            "Conhecimento_PrEP": q1,
            "Conhecimento_PEP": q2,
            "Acesso_servicos": q3,
            "Fonte_informacao": q4,
            "Uso_PrepPEP": q5,
            "Conhece_usuarios": q6,
            "Teste_HIV_frequencia": q7,
            "Metodos_prevencao": ", ".join(q8),
            "Genero": genero,
            "Orientacao_sexual": orientacao,
            "Raca": raca,
            "Faixa_etaria": idade,
            "Renda": renda,
            "Regiao": regiao
        }
        
        if salvar_dados(resposta):
            st.markdown("""
            <div class="success-box">
                <h3 style="color: #000000;">‚úÖ Obrigado por participar da pesquisa!</h3>
                <p style="color: #000000;">Sua contribui√ß√£o √© muito importante para entendermos melhor o conhecimento sobre 
                preven√ß√£o ao HIV em nossa comunidade.</p>
            </div>
            """, unsafe_allow_html=True)
    elif enviado and not consentimento:
        st.error("Voc√™ precisa concordar com os termos de consentimento para enviar o formul√°rio.")

# Se√ß√£o de visualiza√ß√µes (apenas se houver dados)
if not st.session_state.dados.empty:
    st.markdown("---")
    st.markdown('<h2 class="section-header">An√°lise dos Dados Coletados</h2>', unsafe_allow_html=True)
    
    # Estat√≠sticas r√°pidas
    total_respostas = len(st.session_state.dados)
    st.markdown(f"""
    <div style="background-color: #E6F7FF; padding: 1rem; border-radius: 0.5rem; margin-bottom: 1.5rem; color: #000000;">
        <h3 style="text-align: center; color: #000000;">üìä Total de Respostas: {total_respostas}</h3>
    </div>
    """, unsafe_allow_html=True)
    
    # Filtros para os gr√°ficos
    st.sidebar.header("Filtros para An√°lise")
    
    # Sele√ß√£o de vari√°veis para an√°lise
    variavel_x = st.sidebar.selectbox(
        "Vari√°vel para an√°lise (eixo X):",
        options=[col for col in st.session_state.dados.columns if col != 'timestamp'],
        index=0
    )
    
    # Gr√°fico de barras da vari√°vel selecionada
    try:
        st.subheader(f"Distribui√ß√£o de {variavel_x}")
        contagem = st.session_state.dados[variavel_x].value_counts()
        
        fig, ax = plt.subplots(figsize=(10, 6))
        sns.barplot(x=contagem.values, y=contagem.index, ax=ax, palette="viridis")
        ax.set_xlabel("N√∫mero de respostas")
        ax.set_ylabel("")
        plt.tight_layout()
        st.pyplot(fig)
    except Exception as e:
        st.error(f"Erro ao criar gr√°fico: {str(e)}")
    
    # Gr√°ficos de compara√ß√£o
    st.subheader("Rela√ß√£o entre Conhecimento e Demografia")
    
    col7, col8 = st.columns(2)
    
    with col7:
        try:
            # Conhecimento de PrEP por g√™nero
            conhecimento_genero = pd.crosstab(
                st.session_state.dados['Genero'], 
                st.session_state.dados['Conhecimento_PrEP']
            )
            fig, ax = plt.subplots(figsize=(10, 6))
            conhecimento_genero.plot(kind='bar', ax=ax, colormap='Set3')
            ax.set_title("Conhecimento de PrEP por Identidade de G√™nero")
            ax.legend(title="Conhecimento", bbox_to_anchor=(1.05, 1), loc='upper left')
            plt.xticks(rotation=45, ha='right')
            plt.tight_layout()
            st.pyplot(fig)
        except Exception as e:
            st.error(f"Erro ao criar gr√°fico de g√™nero: {str(e)}")
    
    with col8:
        try:
            # Conhecimento de PrEP por faixa et√°ria
            conhecimento_idade = pd.crosstab(
                st.session_state.dados['Faixa_etaria'], 
                st.session_state.dados['Conhecimento_PrEP']
            )
            fig, ax = plt.subplots(figsize=(10, 6))
            conhecimento_idade.plot(kind='bar', ax=ax, colormap='Set2')
            ax.set_title("Conhecimento de PrEP por Faixa Et√°ria")
            ax.legend(title="Conhecimento", bbox_to_anchor=(1.05, 1), loc='upper left')
            plt.xticks(rotation=45, ha='right')
            plt.tight_layout()
            st.pyplot(fig)
        except Exception as e:
            st.error(f"Erro ao criar gr√°fico de idade: {str(e)}")
    
    # An√°lise de Machine Learning (Agrupamento) - SOMENTE SE HOUVER DADOS SUFICIENTES
    if len(st.session_state.dados) >= 3:  # Pelo menos 3 respostas para 3 clusters
        st.markdown("---")
        st.markdown('<h2 class="section-header">An√°lise com Intelig√™ncia Artificial</h2>', unsafe_allow_html=True)
        
        st.markdown("""
        <div style="background-color: #FFF0F5; padding: 1.5rem; border-radius: 0.5rem; border: 2px solid #FF69B4; margin: 1rem 0; color: #000000;">
            <h4 style="color: #000000;">ü§ñ Como a Intelig√™ncia Artificial est√° analisando estas respostas</h4>
            <p style="color: #000000;">Usamos um algoritmo de <strong>aprendizado n√£o supervisionado</strong> chamado K-Means para agrupar 
            automaticamente os respondentes com base em padr√µes similares em suas respostas.</p>
            
            <h5 style="color: #000000;">O processo:</h5>
            <ol style="color: #000000;">
                <li>Convertemos todas as respostas em valores num√©ricos</li>
                <li>Normalizamos os dados para que todas as vari√°veis tenham o mesmo peso</li>
                <li>Reduzimos a dimensionalidade para visualiza√ß√£o em 2D (PCA)</li>
                <li>Agrupamos os respondentes em clusters com caracter√≠sticas similares</li>
            </ol>
        </div>
        """, unsafe_allow_html=True)
        
        try:
            # Preparar dados para clustering
            dados_ml = st.session_state.dados.copy()
            
            # Codificar vari√°veis categ√≥ricas
            le = LabelEncoder()
            for col in dados_ml.select_dtypes(include=['object']).columns:
                if col != 'timestamp' and col != 'Metodos_prevencao':
                    dados_ml[col] = le.fit_transform(dados_ml[col].astype(str))
            
            # Remover colunas com muitos valores √∫nicos ou n√£o num√©ricos
            dados_ml = dados_ml.drop(['timestamp', 'Metodos_prevencao'], axis=1, errors='ignore')
            
            # Verificar se ainda temos dados suficientes ap√≥s o pr√©-processamento
            if len(dados_ml) >= 3:
                # Padronizar os dados
                scaler = StandardScaler()
                dados_scaled = scaler.fit_transform(dados_ml)
                
                # Aplicar K-Means (usando no m√°ximo n-1 clusters onde n √© o n√∫mero de amostras)
                n_clusters = min(3, len(dados_scaled) - 1)
                kmeans = KMeans(n_clusters=n_clusters, random_state=42)
                clusters = kmeans.fit_predict(dados_scaled)
                
                # Reduzir dimensionalidade para visualiza√ß√£o
                pca = PCA(n_components=2)
                componentes = pca.fit_transform(dados_scaled)
                
                # Criar DataFrame para visualiza√ß√£o
                df_viz = pd.DataFrame({
                    'PC1': componentes[:, 0],
                    'PC2': componentes[:, 1],
                    'Cluster': clusters
                })
                
                # Visualizar clusters
                fig, ax = plt.subplots(figsize=(10, 8))
                scatter = ax.scatter(df_viz['PC1'], df_viz['PC2'], c=df_viz['Cluster'], cmap='viridis', alpha=0.7)
                ax.set_xlabel('Componente Principal 1')
                ax.set_ylabel('Componente Principal 2')
                ax.set_title('Agrupamento de Respostas usando Machine Learning (K-Means)')
                legend = ax.legend(*scatter.legend_elements(), title="Clusters")
                ax.add_artist(legend)
                st.pyplot(fig)
                
                # Interpreta√ß√£o dos clusters
                st.info("""
                **Interpreta√ß√£o dos Clusters:** Esta an√°lise agrupa os respondentes com base em padr√µes similares em suas respostas.
                - **Cluster 0**: Possivelmente representa pessoas com menor conhecimento sobre PrEP/PEP
                - **Cluster 1**: Possivelmente representa pessoas com conhecimento intermedi√°rio
                - **Cluster 2**: Possivelmente representa pessoas com maior conhecimento e experi√™ncia com PrEP/PEP
                """)
                
                # Estat√≠sticas por cluster
                st.subheader("Caracter√≠sticas dos Grupos Identificados")
                
                # Adicionar cluster aos dados originais para an√°lise
                dados_com_cluster = st.session_state.dados.copy()
                dados_com_cluster['Cluster'] = clusters
                
                # Mostrar caracter√≠sticas de cada cluster
                for cluster_id in range(n_clusters):
                    with st.expander(f"üìã Caracter√≠sticas do Grupo {cluster_id}"):
                        cluster_data = dados_com_cluster[dados_com_cluster['Cluster'] == cluster_id]
                        st.write(f"**Tamanho do grupo:** {len(cluster_data)} respondentes")
                        
                        # Mostrar distribui√ß√£o de algumas vari√°veis importantes
                        col9, col10 = st.columns(2)
                        
                        with col9:
                            st.write("**Conhecimento de PrEP:**")
                            st.write(cluster_data['Conhecimento_PrEP'].value_counts())
                        
                        with col10:
                            st.write("**Faixa Et√°ria:**")
                            st.write(cluster_data['Faixa_etaria'].value_counts())
            else:
                st.warning("N√£o h√° dados suficientes para an√°lise de agrupamento ap√≥s o pr√©-processamento.")
        except Exception as e:
            st.error(f"Erro na an√°lise de machine learning: {str(e)}")
    else:
        st.info("üß† A an√°lise com Intelig√™ncia Artificial ser√° exibida quando houver pelo menos 3 respostas.")
    
    # Estat√≠sticas descritivas
    try:
        st.markdown("---")
        st.subheader("Estat√≠sticas Descritivas")
        st.dataframe(st.session_state.dados.describe(include='all'))
    except Exception as e:
        st.error(f"Erro ao exibir estat√≠sticas: {str(e)}")
    
    # Download dos dados
    try:
        st.subheader("Exportar Dados")
        csv = st.session_state.dados.to_csv(index=False)
        st.download_button(
            label="Baixar dados completos (CSV)",
            data=csv,
            file_name="dados_prep_sp.csv",
            mime="text/csv"
        )
    except Exception as e:
        st.error(f"Erro ao preparar download: {str(e)}")

else:
    st.info("üìù N√£o h√° dados coletados ainda. As visualiza√ß√µes ser√£o exibidas aqui quando houver respostas suficientes.")

# Rodap√©
st.markdown("---")
st.markdown("""
<div style="text-align: center; color: #000000; margin-top: 2rem;">
    <p>Desenvolvido com Streamlit | Pesquisa sobre Preven√ß√£o ao HIV</p>
</div>
""", unsafe_allow_html=True)